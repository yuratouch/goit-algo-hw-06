import networkx as nx
import matplotlib.pyplot as plt

# Створення графа
G = nx.Graph()

# Додавання вузлів (станції метро)
stations = ["Академмістечко", "Житомирська", "Святошин", "Нивки", "Берестейська", "Шулявська", "Політехнічний інститут", 
            "Вокзальна", "Університет", "Театральна", "Хрещатик", "Арсенальна", "Дніпро", "Гідропарк", "Лівобережна",
            "Дарниця", "Чернігівська", "Лісова",
            "Героїв Дніпра", "Мінська", "Оболонь", "Почайна", "Тараса Шевченка", "Контрактова площа", 
            "Поштова площа", "Майдан Незалежності", "Площа Льва Толстого", "Олімпійська", "Палац Україна", 
            "Либідська", "Деміївська", "Голосіївська", "Васильківська", "Виставковий центр", "Іподром", "Теремки",
            "Сирець", "Дорогожичі", "Лук'янівська", "Золоті ворота", "Палац Спорту", "Кловська", "Печерська", 
            "Дружби народів", "Видубичі", "Славутич", "Осокорки", "Позняки", "Харківська", "Вирлиця", "Бориспільська", "Червоний Хутір"]

G.add_nodes_from(stations)

# Додавання ребер (маршрути між станціями)
edges = [("Академмістечко", "Житомирська"), ("Житомирська", "Святошин"), ("Святошин", "Нивки"), ("Нивки", "Берестейська"),
         ("Берестейська", "Шулявська"), ("Шулявська", "Політехнічний інститут"), ("Політехнічний інститут", "Вокзальна"),
         ("Вокзальна", "Університет"), ("Університет", "Театральна"), ("Театральна", "Хрещатик"), ("Хрещатик", "Арсенальна"),
         ("Арсенальна", "Дніпро"), ("Дніпро", "Гідропарк"), ("Гідропарк", "Лівобережна"), ("Лівобережна", "Дарниця"),
         ("Дарниця", "Чернігівська"), ("Чернігівська", "Лісова"),
         ("Героїв Дніпра", "Мінська"), ("Мінська", "Оболонь"), ("Оболонь", "Почайна"), ("Почайна", "Тараса Шевченка"),
         ("Тараса Шевченка", "Контрактова площа"), ("Контрактова площа", "Поштова площа"), ("Поштова площа", "Майдан Незалежності"),
         ("Майдан Незалежності", "Хрещатик"), ("Площа Льва Толстого", "Олімпійська"), ("Олімпійська", "Палац Україна"),
         ("Палац Україна", "Либідська"), ("Либідська", "Деміївська"), ("Деміївська", "Голосіївська"), ("Голосіївська", "Васильківська"),
         ("Васильківська", "Виставковий центр"), ("Виставковий центр", "Іподром"), ("Іподром", "Теремки"),
         ("Сирець", "Дорогожичі"), ("Дорогожичі", "Лук'янівська"), ("Лук'янівська", "Золоті ворота"), 
         ("Золоті ворота", "Театральна"), ("Палац Спорту", "Кловська"), ("Кловська", "Печерська"), 
         ("Печерська", "Дружби народів"), ("Дружби народів", "Видубичі"), ("Видубичі", "Славутич"), 
         ("Славутич", "Осокорки"), ("Осокорки", "Позняки"), ("Позняки", "Харківська"), ("Харківська", "Вирлиця"),
         ("Вирлиця", "Бориспільська"), ("Бориспільська", "Червоний Хутір")]

G.add_edges_from(edges)

# Візуалізація графа
plt.figure(figsize=(14, 10))
nx.draw(G, with_labels=True, node_color='skyblue', node_size=500, edge_color='gray', font_size=10)
plt.title("Київський метрополітен")
plt.show()

# Алгоритм DFS для знаходження шляху
def dfs_path(graph, start, goal):
    stack = [(start, [start])]
    while stack:
        (vertex, path) = stack.pop()
        for next in set(graph[vertex]) - set(path):
            if next == goal:
                yield path + [next]
            else:
                stack.append((next, path + [next]))

# Алгоритм BFS для знаходження шляху
def bfs_path(graph, start, goal):
    queue = [(start, [start])]
    while queue:
        (vertex, path) = queue.pop(0)
        for next in set(graph[vertex]) - set(path):
            if next == goal:
                yield path + [next]
            else:
                queue.append((next, path + [next]))

# Використання DFS і BFS для знаходження шляху між двома станціями
start_station = "Академмістечко"
end_station = "Лісова"

dfs_paths = list(dfs_path(G, start_station, end_station))
bfs_paths = list(bfs_path(G, start_station, end_station))

print("Шляхи, знайдені алгоритмом DFS:")
for path in dfs_paths:
    print(path)

print("\nШляхи, знайдені алгоритмом BFS:")
for path in bfs_paths:
    print(path)
